#!/usr/bin/env python3
"""–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."""
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from app.config.config import load_config
from app.infrastructure.redis.redis_manager import RedisManager
from app.services.lock_service import LockService


async def test_lock_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏...")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ê–¥–º–∏–Ω—ã: {config.bot.admin_ids}")
        
        # –°–æ–∑–¥–∞–µ–º Redis –º–µ–Ω–µ–¥–∂–µ—Ä
        redis_manager = RedisManager(config.redis)
        redis_client = await redis_manager.get_redis()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
        await redis_client.ping()
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {config.redis.host}:{config.redis.port}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        lock_service = LockService(redis_client)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        initial_state = await lock_service.is_locked()
        print(f"1. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {'üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if initial_state else 'üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}")
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        success, new_state = await lock_service.toggle_lock()
        if success:
            print(f"2. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {'üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if new_state else 'üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}")
        else:
            print("2. ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state = await lock_service.is_locked()
        print(f"3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {'üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if current_state else 'üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await lock_service.set_lock(initial_state)
        final_state = await lock_service.is_locked()
        print(f"4. –í–æ–∑–≤—Ä–∞—Ç –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é: {'üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if final_state else 'üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await redis_client.aclose()
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False
    
    return True


if __name__ == "__main__":
    success = asyncio.run(test_lock_system())
    if not success:
        sys.exit(1)