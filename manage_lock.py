#!/usr/bin/env python3
"""–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –±–æ—Ç–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from app.config.config import load_config
from app.infrastructure.redis.redis_manager import RedisManager
from app.services.lock_service import LockService


async def manage_lock():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –±–æ—Ç–∞."""
    if len(sys.argv) != 2 or sys.argv[1] not in ['status', 'on', 'off', 'toggle']:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python3 manage_lock.py status   - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å")
        print("  python3 manage_lock.py on       - –≤–∫–ª—é—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É")
        print("  python3 manage_lock.py off      - –≤—ã–∫–ª—é—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É")
        print("  python3 manage_lock.py toggle   - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É")
        sys.exit(1)
    
    command = sys.argv[1]
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis
        config = load_config()
        redis_manager = RedisManager(config.redis)
        redis_client = await redis_manager.get_redis()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await redis_client.ping()
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        lock_service = LockService(redis_client)
        
        if command == 'status':
            is_locked = await lock_service.is_locked()
            status = "üîí –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù" if is_locked else "üîì –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù"
            print(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {status}")
            
        elif command == 'on':
            success = await lock_service.set_lock(True)
            if success:
                print("üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –í–ö–õ–Æ–ß–ï–ù–ê")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
                
        elif command == 'off':
            success = await lock_service.set_lock(False)
            if success:
                print("üîì –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –í–´–ö–õ–Æ–ß–ï–ù–ê")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
                
        elif command == 'toggle':
            success, new_state = await lock_service.toggle_lock()
            if success:
                status = "üîí –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù" if new_state else "üîì –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù"
                print(f"–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞: {status}")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await redis_client.aclose()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(manage_lock())