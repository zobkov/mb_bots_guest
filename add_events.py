"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker

from app.config.config import load_config
from app.database.models.registration import Event


async def add_events():
    """–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."""
    config = load_config()
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
    engine = create_async_engine(config.database.async_url)
    
    session_factory = async_sessionmaker(
        bind=engine,
        class_=AsyncSession,
        expire_on_commit=False
    )
    
    # –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    events_data = [
        {
            "name": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–ª–µ–Ω–∞—Ä–Ω–∞—è —Å–µ—Å—Å–∏—è ¬´–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —ç–∫–æ–Ω–æ–º–∏–∫—É –±—É–¥—É—â–µ–≥–æ —á–µ—Ä–µ–∑ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ö–∞–±—ã¬ª",
            "description": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–ª–µ–Ω–∞—Ä–Ω–∞—è —Å–µ—Å—Å–∏—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏",
            "day": "23 –æ–∫—Ç—è–±—Ä—è",
            "start_time": "11:00",
            "end_time": "12:40",
            "event_type": "plenary",
            "is_exclusive": False,
            "max_participants": None,
            "sheet_name": "plenary_session"
        },
        {
            "name": "–í—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ê–Ω–¥—Ä–µ—è –ö–æ—Å—Ç–∏–Ω–∞, –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞-–ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è –ø—Ä–∞–≤–ª–µ–Ω–∏—è –í–¢–ë",
            "description": "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞-–ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è –ø—Ä–∞–≤–ª–µ–Ω–∏—è –í–¢–ë",
            "day": "23 –æ–∫—Ç—è–±—Ä—è",
            "start_time": "17:30",
            "end_time": "18:50",
            "event_type": "speech",
            "is_exclusive": False,
            "max_participants": None,
            "sheet_name": "vtb_speech"
        },
        {
            "name": "–ö–∞–¥—Ä—ã –¥–ª—è –±—É–¥—É—â–µ–≥–æ: –∫–∞–∫ —Å—Ç–∞—Ç—å –∂–µ–ª–∞–Ω–Ω—ã–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º?",
            "description": "–í–æ—Ä–∫—à–æ–ø –æ —Ä–∞–∑–≤–∏—Ç–∏–∏ –∫–∞—Ä—å–µ—Ä—ã –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤",
            "day": "23 –æ–∫—Ç—è–±—Ä—è",
            "start_time": "13:10",
            "end_time": "14:30",
            "event_type": "workshop",
            "is_exclusive": True,
            "max_participants": 100,
            "sheet_name": "career_workshop"
        },
        {
            "name": "–í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ –º–∞–ª—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ ‚Äî –Ω–æ–≤—ã–µ —Ü–µ–Ω—Ç—Ä—ã –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è",
            "description": "–û–±—Å—É–∂–¥–µ–Ω–∏–µ —Ä–∞–∑–≤–∏—Ç–∏—è –º–∞–ª—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –∏ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏",
            "day": "23 –æ–∫—Ç—è–±—Ä—è",
            "start_time": "13:10",
            "end_time": "14:30",
            "event_type": "workshop",
            "is_exclusive": True,
            "max_participants": 80,
            "sheet_name": "small_cities_workshop"
        },
        {
            "name": "–ù–µ–π—Ä–æ–Ω—ã –º–µ–≥–∞–ø–æ–ª–∏—Å–æ–≤: AI, IoT –∏ BigData –∫–∞–∫ —Ü–∏—Ñ—Ä–æ–≤–∞—è –Ω–µ—Ä–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
            "description": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –≤–æ—Ä–∫—à–æ–ø –æ —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥–æ–≤",
            "day": "24 –æ–∫—Ç—è–±—Ä—è",
            "start_time": "13:10",
            "end_time": "14:30",
            "event_type": "workshop",
            "is_exclusive": True,
            "max_participants": 120,
            "sheet_name": "tech_workshop"
        }
    ]
    
    try:
        async with session_factory() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            from sqlalchemy import text
            existing_events = await session.execute(text("SELECT COUNT(*) FROM events"))
            count = existing_events.scalar()
            
            if count > 0:
                print(f"‚ö†Ô∏è  –í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å {count} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ.")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            for event_data in events_data:
                event = Event(**event_data)
                session.add(event)
            
            await session.commit()
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(events_data)} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            print("\nüìÖ –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
            for event_data in events_data:
                exclusive_mark = " (–≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–µ–µ)" if event_data["is_exclusive"] else ""
                max_part = f" (–º–∞–∫—Å. {event_data['max_participants']})" if event_data["max_participants"] else ""
                print(f"‚Ä¢ {event_data['day']} {event_data['start_time']}-{event_data['end_time']}: {event_data['name']}{exclusive_mark}{max_part}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {e}")
    finally:
        await engine.dispose()


if __name__ == "__main__":
    asyncio.run(add_events())