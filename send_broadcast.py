"""Utility script for sending a broadcast message to users from CSV."""
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
import asyncio
import csv
from dataclasses import dataclass
from pathlib import Path
from typing import Iterable, List, Tuple

from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.exceptions import TelegramRetryAfter

from app.config.config import load_config

CSV_PATH = Path("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥–æ—Å—Ç–µ–π –ú–ë25 - —Ç–µ—Ö–≤—ã–≥—Ä—É–∑–∫–∞ (2).csv")
MESSAGE_TEXT = ("""<b>–ü—Ä–∏–≤–µ—Ç!</b>

–ú—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ <b>—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É</b> üéâ

–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –ø–æ—è–≤–∏–ª–∞—Å—å –≤–∫–ª–∞–¥–∫–∞ ¬´–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞¬ª ‚Äî —Ç–∞–º –ª–µ–∂–∏—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞.

–û—Ç–ø—Ä–∞–≤—å –µ—ë –¥—Ä—É–∑—å—è–º! –ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ –Ω–µ–π –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ <b>¬´–°–µ–≤–µ—Ä–≥—Ä—É–ø–ø¬ª —Å —É—á–∞—Å—Ç–∏–µ–º –ê–ª–µ–∫—Å–µ—è –ú–æ—Ä–¥–∞—à–æ–≤–∞</b>, —Ç—ã –ø–æ–ª—É—á–∏—à—å <b>+1 –±–∞–ª–ª</b>.

–ü–æ—Å–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ–¥–≤–µ–¥—ë–º –∏—Ç–æ–≥–∏: –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ª—é–¥–µ–π ‚Äî –ø–æ–ª—É—á–∏—Ç –ø—Ä–∏–∑—ã 

üéÅ –ü—Ä–∏–∑—ã:
‚Ä¢ ü•á 1 –º–µ—Å—Ç–æ ‚Äî —Å–≤–∏—Ç—à–æ—Ç
‚Ä¢ ü•à 2‚Äì4 –º–µ—Å—Ç–∞ ‚Äî –∫–∞—Ä—Ç—Ö–æ–ª–¥–µ—Ä
‚Ä¢ ü•â 5‚Äì7 –º–µ—Å—Ç–∞ ‚Äî –±—É—Ç—ã–ª–∫–∞
‚Ä¢ üí´ 8‚Äì10 –º–µ—Å—Ç–∞ ‚Äî –Ω–∞–±–æ—Ä –Ω–∞–∫–ª–µ–µ–∫
"""
)

MENU_BUTTON_MARKUP = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="open_main_menu")]]
)


@dataclass
class Recipient:
    """Recipient info for the broadcast."""
    user_id: int
    username: str

    @property
    def display(self) -> str:
        """Return human readable representation for logging."""
        username_part = f"@{self.username}" if self.username else "(username –Ω–µ —É–∫–∞–∑–∞–Ω)"
        return f"{self.user_id} {username_part}"


def load_recipients(csv_path: Path) -> List[Recipient]:
    """Load recipients list from CSV file."""
    recipients: List[Recipient] = []
    if not csv_path.exists():
        raise FileNotFoundError(f"–§–∞–π–ª {csv_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    with csv_path.open("r", encoding="utf-8", newline="") as csv_file:
        reader = csv.DictReader(csv_file)
        for row in reader:
            raw_id = (row.get("id") or "").strip()
            if not raw_id:
                continue

            try:
                user_id = int(raw_id)
            except ValueError:
                print(f"–ü—Ä–æ–ø—É—Å–∫–∞—é —Å—Ç—Ä–æ–∫—É —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º id: {raw_id}")
                continue

            username = (row.get("Username") or row.get("username") or "").strip()
            recipients.append(Recipient(user_id=user_id, username=username))

    return recipients


def ask_for_confirmation(recipients: Iterable[Recipient], message: str) -> bool:
    """Print preview info and ask for confirmation."""
    recipients_list = list(recipients)

    print("\n–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:\n")
    print(message)
    print("\n–ü–æ–ª—É—á–∞—Ç–µ–ª–∏:")
    for recipient in recipients_list:
        print(f" - {recipient.display}")

    print(f"\n–í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(recipients_list)}")
    answer = input("\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ? [y/N]: ").strip().lower()
    return answer in {"y", "yes", "–¥", "–¥–∞"}


async def send_messages(bot: Bot, recipients: Iterable[Recipient], message: str) -> Tuple[List[int], List[Tuple[Recipient, str]]]:
    """Send messages to the provided recipients."""
    successes: List[int] = []
    failures: List[Tuple[Recipient, str]] = []

    for recipient in recipients:
        try:
            await bot.send_message(recipient.user_id, message, reply_markup=MENU_BUTTON_MARKUP)
            successes.append(recipient.user_id)
            await asyncio.sleep(0.2)
        except TelegramRetryAfter as exc:
            delay = int(exc.retry_after) + 1
            print(f"–¢–µ–ª–µ–≥—Ä–∞–º –ø—Ä–æ—Å–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient.user_id}")
            await asyncio.sleep(delay)
            try:
                await bot.send_message(recipient.user_id, message, reply_markup=MENU_BUTTON_MARKUP)
                successes.append(recipient.user_id)
            except Exception as err:  # noqa: BLE001
                failures.append((recipient, str(err)))
        except Exception as err:  # noqa: BLE001
            failures.append((recipient, str(err)))
            await asyncio.sleep(0.5)

    return successes, failures


async def main() -> None:
    """Entry point for the broadcast script."""
    recipients = load_recipients(CSV_PATH)
    if not recipients:
        print("–°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç. –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.")
        return

    if not ask_for_confirmation(recipients, MESSAGE_TEXT):
        print("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        return

    config = load_config()
    bot = Bot(token=config.bot.token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

    try:
        successes, failures = await send_messages(bot, recipients, MESSAGE_TEXT)
    finally:
        await bot.session.close()

    print(f"\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {len(successes)}")
    if failures:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {len(failures)}")
        for recipient, error in failures:
            print(f" - {recipient.display}: {error}")
    else:
        print("–û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")


if __name__ == "__main__":
    asyncio.run(main())
