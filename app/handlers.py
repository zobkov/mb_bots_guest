"""–û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥."""
from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import CallbackQuery, Message
from aiogram_dialog import DialogManager, StartMode
import redis.asyncio as redis

from app.states import StartSG, MainMenuSG
from app.services.user_service import UserService
from app.services.lock_service import LockService
from app.filters import IsAdminFilter
from app.utils.logger import get_logger

logger = get_logger(__name__)
router = Router()


@router.message(CommandStart())
async def start_command(message: Message, dialog_manager: DialogManager, user_service: UserService):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    telegram_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await user_service.get_user_by_telegram_id(telegram_id)
    
    if user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await dialog_manager.start(MainMenuSG.menu, mode=StartMode.RESET_STACK)
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await dialog_manager.start(StartSG.welcome, mode=StartMode.RESET_STACK)


@router.message(Command("menu"))
async def menu_command(message: Message, dialog_manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    await dialog_manager.start(MainMenuSG.menu, mode=StartMode.RESET_STACK)


@router.callback_query(F.data == "open_main_menu")
async def menu_button_handler(callback: CallbackQuery, dialog_manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –∏–∑ —à–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    await callback.answer()
    await dialog_manager.start(MainMenuSG.menu, mode=StartMode.RESET_STACK)


@router.message(Command("lock"), IsAdminFilter())
async def lock_command(message: Message, redis_client: redis.Redis):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /lock –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."""
    # Redis –∫–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ dependency injection
    lock_service = LockService(redis_client)
    
    try:
        success, new_state = await lock_service.toggle_lock()
        
        if success:
            status_text = "üîí <b>–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù</b>" if new_state else "üîì <b>–†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù</b>"
            description = (
                "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–æ–≤) –ø–æ–ª—É—á–∞—é—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö."
                if new_state else 
                "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ."
            )
            
            await message.answer(
                f"üîß <b>–†–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω</b>\n\n"
                f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
                f"üë§ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–Ω–µ—Å: {message.from_user.first_name}"
            )
            
            logger.info(
                f"–ê–¥–º–∏–Ω {message.from_user.id} ({message.from_user.first_name}) "
                f"{'–≤–∫–ª—é—á–∏–ª' if new_state else '–≤—ã–∫–ª—é—á–∏–ª'} —Ä–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"
            )
        else:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis."
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /lock: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã."
        )