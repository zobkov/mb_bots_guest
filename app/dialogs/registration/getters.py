"""–ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."""
from typing import Dict, Any, List

from aiogram_dialog import DialogManager

from app.services.event_service import EventService
from app.services.user_service import UserService


async def get_exclusive_events_data(dialog_manager: DialogManager, **kwargs) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö (Radio)."""
    event_service: EventService = dialog_manager.middleware_data["event_service"]
    user_service: UserService = dialog_manager.middleware_data["user_service"]
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    all_events = await event_service.get_all_events()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    exclusive_events = [event for event in all_events if event.is_exclusive]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    telegram_id = dialog_manager.event.from_user.id
    user = await user_service.get_user_by_telegram_id(telegram_id)
    
    current_exclusive_selection = None
    if user:
        registrations = await event_service.get_user_registrations(user.id)
        for reg in registrations:
            if reg.event.is_exclusive:
                current_exclusive_selection = str(reg.event.id)
                break
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if "selected_exclusive" in dialog_manager.dialog_data:
        current_exclusive_selection = dialog_manager.dialog_data["selected_exclusive"]
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ Radio
    if current_exclusive_selection:
        try:
            radio_widget = dialog_manager.find("exclusive_radio")
            if radio_widget:
                await radio_widget.set_checked(current_exclusive_selection)
        except:
            pass
    
    return {
        "exclusive_events": exclusive_events,
        "current_exclusive_selection": current_exclusive_selection,
    }


async def get_optional_events_data(dialog_manager: DialogManager, **kwargs) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö (Checkbox)."""
    event_service: EventService = dialog_manager.middleware_data["event_service"]
    user_service: UserService = dialog_manager.middleware_data["user_service"]
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    all_events = await event_service.get_all_events()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–Ω–µ –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏–µ)
    optional_events = [event for event in all_events if not event.is_exclusive]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    telegram_id = dialog_manager.event.from_user.id
    user = await user_service.get_user_by_telegram_id(telegram_id)
    
    current_optional_selections = []
    if user:
        registrations = await event_service.get_user_registrations(user.id)
        for reg in registrations:
            if not reg.event.is_exclusive:
                current_optional_selections.append(str(reg.event.id))
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if "selected_optional" in dialog_manager.dialog_data:
        current_optional_selections = dialog_manager.dialog_data["selected_optional"]
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤
    plenary_checked = False
    vtb_checked = False
    
    for event in optional_events:
        if str(event.id) in current_optional_selections:
            if event.sheet_name == "plenary_session":
                plenary_checked = True
            elif event.sheet_name == "vtb_speech":
                vtb_checked = True
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"DEBUG: current_optional_selections = {current_optional_selections}")
    print(f"DEBUG: plenary_checked = {plenary_checked}, vtb_checked = {vtb_checked}")
    
    return {
        "optional_events": optional_events,
        "current_optional_selections": current_optional_selections,
        "plenary_checked": plenary_checked,
        "vtb_checked": vtb_checked,
    }


async def get_confirmation_data(dialog_manager: DialogManager, **kwargs) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    event_service: EventService = dialog_manager.middleware_data["event_service"]
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
    selected_exclusive = dialog_manager.dialog_data.get("selected_exclusive")
    selected_optional = dialog_manager.dialog_data.get("selected_optional", [])
    
    selected_events = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    if selected_exclusive:
        try:
            event_id = int(selected_exclusive)
            event = await event_service.get_event_by_id(event_id)
            if event:
                selected_events.append(event)
        except (ValueError, TypeError):
            pass
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    for event_id_str in selected_optional:
        try:
            event_id = int(event_id_str)
            event = await event_service.get_event_by_id(event_id)
            if event:
                selected_events.append(event)
        except (ValueError, TypeError):
            pass
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if selected_events:
        events_text = "\n".join([
            f"‚úÖ <b>{event.name}</b>\n   üìÖ {event.start_time} ‚Äî {event.end_time}"
            for event in selected_events
        ])
    else:
        events_text = "‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω—ã"
    
    return {
        "selected_events": selected_events,
        "events_text": events_text,
        "has_selections": len(selected_events) > 0,
        "not_has_selections": len(selected_events) == 0,
    }


async def get_my_registrations_data(dialog_manager: DialogManager, **kwargs) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    event_service: EventService = dialog_manager.middleware_data["event_service"]
    user_service: UserService = dialog_manager.middleware_data["user_service"]
    
    telegram_id = dialog_manager.event.from_user.id
    user = await user_service.get_user_by_telegram_id(telegram_id)
    
    if not user:
        return {
            "registrations": [],
            "registrations_text": "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.",
            "has_registrations": False,
        }
    
    registrations = await event_service.get_user_registrations(user.id)
    
    if not registrations:
        registrations_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."
        has_registrations = False
    else:
        registrations_text = "\n\n".join([
            f"‚úÖ <b>{reg.event.name}</b>\n   üìÖ {reg.event.start_time} ‚Äî {reg.event.end_time}"
            for reg in registrations
        ])
        has_registrations = True
    
    return {
        "registrations": registrations,
        "registrations_text": registrations_text,
        "has_registrations": has_registrations,
        "not_has_registrations": not has_registrations,
    }