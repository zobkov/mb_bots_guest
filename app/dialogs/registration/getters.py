"""–ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."""
from typing import Dict, Any, List

from aiogram_dialog import DialogManager

from app.services.event_service import EventService
from app.services.user_service import UserService


async def get_exclusive_events_data(dialog_manager: DialogManager, **kwargs) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö (Radio)."""
    event_service: EventService = dialog_manager.middleware_data["event_service"]
    user_service: UserService = dialog_manager.middleware_data["user_service"]
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    all_events = await event_service.get_all_events()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    exclusive_events = [event for event in all_events if event.is_exclusive]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    telegram_id = dialog_manager.event.from_user.id
    user = await user_service.get_user_by_telegram_id(telegram_id)
    
    current_exclusive_selection = None
    if user:
        registrations = await event_service.get_user_registrations(user.id)
        for reg in registrations:
            if reg.event.is_exclusive:
                current_exclusive_selection = str(reg.event.id)
                break
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if "selected_exclusive" in dialog_manager.dialog_data:
        current_exclusive_selection = dialog_manager.dialog_data["selected_exclusive"]
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ Radio
    if current_exclusive_selection:
        try:
            radio_widget = dialog_manager.find("exclusive_radio")
            if radio_widget:
                await radio_widget.set_checked(current_exclusive_selection)
        except:
            pass
    
    return {
        "exclusive_events": exclusive_events,
        "current_exclusive_selection": current_exclusive_selection,
    }


async def get_optional_events_data(dialog_manager: DialogManager, **kwargs) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–∏–º–∏—Ç–æ–≤."""
    event_service: EventService = dialog_manager.middleware_data["event_service"]
    user_service: UserService = dialog_manager.middleware_data["user_service"]
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    all_events = await event_service.get_all_events()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    telegram_id = dialog_manager.event.from_user.id
    user = await user_service.get_user_by_telegram_id(telegram_id)
    
    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ø—É—Å—Ç–æ–µ, –∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—É—â–∏–º–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è–º–∏
    if "selected_optional" not in dialog_manager.dialog_data:
        current_selections = []
        if user:
            registrations = await event_service.get_user_registrations(user.id)
            current_selections = [str(reg.event.id) for reg in registrations]
        dialog_manager.dialog_data["selected_optional"] = current_selections
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±–æ—Ä –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ (–Ω–µ –∏–∑ –ë–î!)
    current_selections = dialog_manager.dialog_data.get("selected_optional", [])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    events_info_lines = []
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
    available_events = []
    full_events_selected = []
    
    for event in all_events:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        registered_count = await event_service.get_registered_count(event.id)
        is_full = event.max_participants and registered_count >= event.max_participants
        is_selected = str(event.id) in current_selections
        
        # –î–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –æ–Ω —Å–µ–π—á–∞—Å –≤ –¥–∏–∞–ª–æ–≥–µ
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±—ã–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Ç–æ –æ–Ω –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –¥–∞–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
        current_db_registrations = []
        if user:
            db_registrations = await event_service.get_user_registrations(user.id)
            current_db_registrations = [str(reg.event.id) for reg in db_registrations]
        
        was_registered_in_db = str(event.id) in current_db_registrations
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
        if event.max_participants:
            available_spots = event.max_participants - registered_count
            spots_text = f"–û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç: {available_spots}" if available_spots > 0 else "üîí –ú–µ—Å—Ç –Ω–µ—Ç"
        else:
            spots_text = "–û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        description = getattr(event, 'description', None) or ""
        if description != "":
            description = "- " + description
        
        event_info = f"‚Äî <b>{event.name}</b> <i>{description}</i>\nüìÖ {event.day} \t{event.start_time} - {event.end_time}: \n<i>{spots_text}</i>"
        events_info_lines.append(event_info)
        
        event_info_dict = {
            "event": event,
            "is_selected": is_selected,
            "is_full": is_full,
            "registered_count": registered_count,
            "checkbox_text": f"{'‚òëÔ∏è' if is_selected else '‚òê'} {event.day} {event.start_time}-{event.end_time} {event.name}",
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º
        if is_full and not is_selected and not was_registered_in_db:
            # –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ, –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –∏ –Ω–µ –±—ã–ª–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ - –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
            event_info_dict["checkbox_text"] = f"üîí {event.day} {event.start_time}-{event.end_time} {event.name} (–∑–∞–ø–æ–ª–Ω–µ–Ω–æ)"
            continue  # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
        elif is_selected and is_full:
            # –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ, –Ω–æ –≤—ã–±—Ä–∞–Ω–æ - –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å
            full_events_selected.append(event_info_dict)
            continue
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        available_events.append(event_info_dict)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
    events_info_text = "\n\n".join(events_info_lines)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"DEBUG: current_selections (from dialog) = {current_selections}")
    print(f"DEBUG: available_events = {len(available_events)}, full_events_selected = {len(full_events_selected)}")
    
    return {
        "all_events": all_events,
        "available_events": available_events,
        "full_events_selected": full_events_selected,
        "current_selections": current_selections,
        "events_info_text": events_info_text,
    }


async def get_confirmation_data(dialog_manager: DialogManager, **kwargs) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π."""
    event_service: EventService = dialog_manager.middleware_data["event_service"]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–π –≤—ã–±–æ—Ä –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
    desired_selections = dialog_manager.dialog_data.get("selected_optional", [])
    
    selected_events = []
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ ID
    for event_id_str in desired_selections:
        try:
            event_id = int(event_id_str)
            event = await event_service.get_event_by_id(event_id)
            if event:
                selected_events.append(event)
        except (ValueError, TypeError):
            pass
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if selected_events:
        events_text = "\n".join([
            f"‚úÖ <b>{event.name}</b>\n   üìÖ {event.day} {event.start_time} ‚Äî {event.end_time}"
            for event in selected_events
        ])
    else:
        events_text = "‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω—ã"
    
    return {
        "selected_events": selected_events,
        "events_text": events_text,
        "has_selections": len(selected_events) > 0,
        "not_has_selections": len(selected_events) == 0,
    }


async def get_my_registrations_data(dialog_manager: DialogManager, **kwargs) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    event_service: EventService = dialog_manager.middleware_data["event_service"]
    user_service: UserService = dialog_manager.middleware_data["user_service"]
    
    telegram_id = dialog_manager.event.from_user.id
    user = await user_service.get_user_by_telegram_id(telegram_id)
    
    if not user:
        return {
            "registrations": [],
            "registrations_text": "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.",
            "has_registrations": False,
        }
    
    registrations = await event_service.get_user_registrations(user.id)
    
    if not registrations:
        registrations_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."
        has_registrations = False
    else:
        registrations_text = "\n\n".join([
            f"‚úÖ <b>{reg.event.name}</b>\nüìÖ {reg.event.day}    {reg.event.start_time} ‚Äî {reg.event.end_time}"
            for reg in registrations
        ])
        has_registrations = True
    
    return {
        "registrations": registrations,
        "registrations_text": registrations_text,
        "has_registrations": has_registrations,
        "not_has_registrations": not has_registrations,
    }