"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."""
from typing import Any

from aiogram_dialog import DialogManager, StartMode, ShowMode
from aiogram_dialog.widgets.kbd import Button, Select

from app.services.event_service import EventService
from app.services.user_service import UserService
from app.states import RegistrationSG, MainMenuSG


async def on_enter_events_list(
    callback,
    result,
    dialog_manager: DialogManager
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."""
    # –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–∏–º–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è–º–∏
    user_service: UserService = dialog_manager.middleware_data["user_service"]
    event_service: EventService = dialog_manager.middleware_data["event_service"]
    
    telegram_id = callback.from_user.id if callback else dialog_manager.event.from_user.id
    user = await user_service.get_user_by_telegram_id(telegram_id)
    
    if user:
        registrations = await event_service.get_user_registrations(user.id)
        selected_events = [str(reg.event.id) for reg in registrations]
        dialog_manager.dialog_data["selected_optional"] = selected_events
        print(f"DEBUG: Preloaded selections: {selected_events}")


async def on_toggle_event_registration(
    callback,
    widget: Select,
    dialog_manager: DialogManager,
    item_id: str,
    **kwargs
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (—Ç–æ–ª—å–∫–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞)."""
    event_service: EventService = dialog_manager.middleware_data["event_service"]
    
    try:
        event_id = int(item_id)
        event = await event_service.get_event_by_id(event_id)
        
        if not event:
            await callback.message.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
        current_selections = dialog_manager.dialog_data.get("selected_optional", [])
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä
        if item_id in current_selections:
            # –£–±–∏—Ä–∞–µ–º –∏–∑ –≤—ã–±–æ—Ä–∞
            current_selections.remove(item_id)
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—ã–±–æ—Ä
            # –î–ª—è –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —É–±–∏—Ä–∞–µ–º –¥—Ä—É–≥–∏–µ –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏–µ
            if event.is_exclusive:
                # –£–±–∏—Ä–∞–µ–º –¥—Ä—É–≥–∏–µ –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–∑ –≤—ã–±–æ—Ä–∞
                all_events = await event_service.get_all_events()
                for other_event in all_events:
                    if other_event.is_exclusive and other_event.id != event_id:
                        other_id_str = str(other_event.id)
                        if other_id_str in current_selections:
                            current_selections.remove(other_id_str)
                            await callback.message.answer(f"‚ûñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±—Ä–∞–Ω–æ (–∫–æ–Ω—Ñ–ª–∏–∫—Ç –≤—Ä–µ–º–µ–Ω–∏): {other_event.name}")
            
            current_selections.append(item_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞
        dialog_manager.dialog_data["selected_optional"] = current_selections
        
        print(f"DEBUG: Updated selections: {current_selections}")
        
    except ValueError:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def on_confirm_final_registration(callback, button: Button, dialog_manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π - —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –∏ Google Sheets."""
    event_service: EventService = dialog_manager.middleware_data["event_service"]
    user_service: UserService = dialog_manager.middleware_data["user_service"]
    
    telegram_id = callback.from_user.id
    user = await user_service.get_user_by_telegram_id(telegram_id)
    
    if not user:
        await callback.message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∂–µ–ª–∞–µ–º—ã–π –≤—ã–±–æ—Ä –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
    desired_selections = dialog_manager.dialog_data.get("selected_optional", [])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î
    current_registrations = await event_service.get_user_registrations(user.id)
    current_ids = [str(reg.event.id) for reg in current_registrations]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏ —á—Ç–æ —É–±—Ä–∞—Ç—å
    to_register = [event_id for event_id in desired_selections if event_id not in current_ids]
    to_unregister = [event_id for event_id in current_ids if event_id not in desired_selections]
    
    success_count = 0
    error_messages = []
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
        for event_id_str in to_register:
            event_id = int(event_id_str)
            event = await event_service.get_event_by_id(event_id)
            if not event:
                error_messages.append(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            registered_count = await event_service.get_registered_count(event_id)
            if event.max_participants and registered_count >= event.max_participants:
                error_messages.append(f"üîí –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{event.name}' –∑–∞–ø–æ–ª–Ω–µ–Ω–æ (–ª–∏–º–∏—Ç: {event.max_participants})")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ —Å –ª–∏–º–∏—Ç–∞–º–∏, –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        if error_messages:
            error_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n" + "\n".join(error_messages)
            await callback.message.answer(error_text)
            await dialog_manager.switch_to(RegistrationSG.optional_events, show_mode=ShowMode.DELETE_AND_SEND)
            return
        
        # –û—Ç–º–µ–Ω—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        for event_id_str in to_unregister:
            event_id = int(event_id_str)
            success, message = await event_service.unregister_user_from_event(user, event_id)
            if success:
                success_count += 1
            else:
                error_messages.append(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: {message}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        for event_id_str in to_register:
            event_id = int(event_id_str)
            success, message = await event_service.register_user_for_event(user, event_id)
            if success:
                success_count += 1
            else:
                error_messages.append(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {message}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if success_count > 0:
            result_message = f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {success_count}"
            if error_messages:
                result_message += f"\n\n‚ö†Ô∏è –û—à–∏–±–∫–∏:\n" + "\n".join(error_messages)
        elif error_messages:
            result_message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n" + "\n".join(error_messages)
        else:
            result_message = "‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
        
        await callback.message.answer(result_message)
        await dialog_manager.switch_to(RegistrationSG.my_registrations, show_mode=ShowMode.DELETE_AND_SEND)
        
    except Exception as e:
        await callback.message.answer(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")
        await dialog_manager.switch_to(RegistrationSG.optional_events, show_mode=ShowMode.DELETE_AND_SEND)


async def on_edit_registrations(callback, button: Button, dialog_manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è–º–∏."""
    await dialog_manager.switch_to(RegistrationSG.optional_events, show_mode=ShowMode.DELETE_AND_SEND)


async def on_unregister_event(
    callback,
    widget: Select,
    dialog_manager: DialogManager,
    item_id: str,
    **kwargs
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ."""
    event_service: EventService = dialog_manager.middleware_data["event_service"]
    user_service: UserService = dialog_manager.middleware_data["user_service"]
    
    telegram_id = callback.from_user.id
    user = await user_service.get_user_by_telegram_id(telegram_id)
    
    if not user:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    try:
        event_id = int(item_id)
        success, message = await event_service.unregister_user_from_event(user, event_id)
        
        if success:
            await callback.message.answer(f"‚úÖ {message}")
        else:
            await callback.message.answer(f"‚ùå {message}")
            
    except ValueError:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")


async def on_back_to_menu(callback, button: Button, dialog_manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    dialog_manager.show_mode = ShowMode.SEND
    await dialog_manager.start(MainMenuSG.menu, mode=StartMode.RESET_STACK)