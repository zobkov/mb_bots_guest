"""Middleware –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."""
from typing import Any, Awaitable, Callable, Dict

from aiogram import BaseMiddleware
from aiogram.types import TelegramObject, Update, Message, CallbackQuery, InlineQuery
import redis.asyncio as redis

from app.database.database import Database
from app.infrastructure.google_sheets.sheets_manager import GoogleSheetsManager
from app.services.user_service import UserService
from app.services.event_service import EventService
from app.services.lock_service import LockService
from app.utils.logger import get_logger

logger = get_logger(__name__)


class LockMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–æ—Ç–∞."""
    
    def __init__(self, redis_client: redis.Redis, admin_ids: list[int]):
        self.lock_service = LockService(redis_client)
        self.admin_ids = admin_ids
        logger.info(f"LockMiddleware –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ê–¥–º–∏–Ω—ã: {admin_ids}")
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Å–æ–±—ã—Ç–∏—è (—Ä–∞–±–æ—Ç–∞–µ–º —Å Update)
        user_id = None
        event_type = type(event).__name__
        
        logger.info(f"LockMiddleware: –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ {event_type}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π –≤–Ω—É—Ç—Ä–∏ Update
        try:
            if hasattr(event, 'message') and event.message and hasattr(event.message, 'from_user') and event.message.from_user:
                user_id = event.message.from_user.id
                logger.info(f"LockMiddleware: –Ω–∞–π–¥–µ–Ω user_id {user_id} –≤ event.message.from_user")
            elif hasattr(event, 'callback_query') and event.callback_query and hasattr(event.callback_query, 'from_user') and event.callback_query.from_user:
                user_id = event.callback_query.from_user.id
                logger.info(f"LockMiddleware: –Ω–∞–π–¥–µ–Ω user_id {user_id} –≤ event.callback_query.from_user")
            elif hasattr(event, 'inline_query') and event.inline_query and hasattr(event.inline_query, 'from_user') and event.inline_query.from_user:
                user_id = event.inline_query.from_user.id
                logger.info(f"LockMiddleware: –Ω–∞–π–¥–µ–Ω user_id {user_id} –≤ event.inline_query.from_user")
            elif hasattr(event, 'chosen_inline_result') and event.chosen_inline_result and hasattr(event.chosen_inline_result, 'from_user') and event.chosen_inline_result.from_user:
                user_id = event.chosen_inline_result.from_user.id
                logger.info(f"LockMiddleware: –Ω–∞–π–¥–µ–Ω user_id {user_id} –≤ event.chosen_inline_result.from_user")
            elif hasattr(event, 'from_user') and event.from_user:
                user_id = event.from_user.id
                logger.info(f"LockMiddleware: –Ω–∞–π–¥–µ–Ω user_id {user_id} –≤ event.from_user")
            else:
                logger.info(f"LockMiddleware: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ user_id –≤ —Å–æ–±—ã—Ç–∏–∏ {event_type}")
        except Exception as e:
            logger.error(f"LockMiddleware: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ user_id: {e}")
        
        logger.info(f"LockMiddleware: –æ–±—Ä–∞–±–æ—Ç–∫–∞ {event_type}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_id, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–≤–æ–∑–º–æ–∂–Ω–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ)
        if user_id is None:
            logger.info(f"LockMiddleware: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_id –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_type}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return await handler(event, data)
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if user_id in self.admin_ids:
            logger.info(f"LockMiddleware: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} - –∞–¥–º–∏–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
            return await handler(event, data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        try:
            is_locked = await self.lock_service.is_locked()
            logger.info(f"LockMiddleware: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ = {is_locked}")
            
            if is_locked:
                logger.warning(f"LockMiddleware: –ë–õ–û–ö–ò–†–û–í–ö–ê –ê–ö–¢–ò–í–ù–ê! –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö
                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    if hasattr(event, 'message') and event.message:
                        await event.message.answer(
                            "üîß <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã</b>\n\n"
                            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã.\n"
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –ø–æ–∑–∂–µ.\n\n"
                            "–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! üôè"
                        )
                        logger.warning(f"LockMiddleware: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ—Ö. —Ä–∞–±–æ—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    elif hasattr(event, 'callback_query') and event.callback_query:
                        await event.callback_query.answer(
                            "üîß –ü—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                            show_alert=True
                        )
                        logger.warning(f"LockMiddleware: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ callback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ—Ö. —Ä–∞–±–æ—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    elif hasattr(event, 'inline_query') and event.inline_query:
                        # –î–ª—è inline –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ—Å—Ç–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º
                        logger.warning(f"LockMiddleware: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω inline –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    else:
                        logger.warning(f"LockMiddleware: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è {event_type} –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                        
                except Exception as e:
                    logger.error(f"LockMiddleware: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
                # –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
                logger.warning(f"LockMiddleware: –ë–õ–û–ö–ò–†–£–ï–ú –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return None
            
        except Exception as e:
            logger.error(f"LockMiddleware: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ Redis - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–∞–ª—å—à–µ (fail-safe)
            logger.warning("LockMiddleware: –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ Redis –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–∞–ª—å—à–µ")
        
        # –ë–æ—Ç –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        logger.info(f"LockMiddleware: –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return await handler(event, data)


class DependencyMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏."""
    
    def __init__(
        self,
        database: Database,
        sheets_manager: GoogleSheetsManager
    ):
        self.database = database
        self.sheets_manager = sheets_manager
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        async with self.database.get_session() as session:
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
            user_service = UserService(session, self.sheets_manager)
            event_service = EventService(session, self.sheets_manager)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥–∞–Ω–Ω—ã–µ
            data["session"] = session
            data["user_service"] = user_service
            data["event_service"] = event_service
            data["sheets_manager"] = self.sheets_manager
            
            return await handler(event, data)