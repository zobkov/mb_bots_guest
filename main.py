"""–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.redis import RedisStorage, DefaultKeyBuilder
from aiogram_dialog import setup_dialogs, ShowMode
from redis.asyncio import Redis

from app.config.config import load_config
from app.database.database import Database
from app.infrastructure.redis.redis_manager import RedisManager
from app.infrastructure.google_sheets.sheets_manager import GoogleSheetsManager
from app.middleware import DependencyMiddleware, LockMiddleware
from app.handlers import router as main_router
from app.dialogs.registry import register_dialogs
from app.utils.logger import setup_logging, get_logger, ContextLogger


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging()
    logger = get_logger(__name__)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ Management Future '25")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º Redis –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è FSM
        if config.redis.password:
            redis_url = f"redis://:{config.redis.password}@{config.redis.host}:{config.redis.port}/0"
        else:
            redis_url = f"redis://{config.redis.host}:{config.redis.port}/0"
        
        redis_client = Redis.from_url(redis_url, decode_responses=True)  # –í–∞–∂–Ω–æ: –¥–æ–±–∞–≤–ª—è–µ–º decode_responses=True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
        try:
            await redis_client.ping()
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {config.redis.host}:{config.redis.port}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è FSM
        storage = RedisStorage(
            redis=redis_client,
            key_builder=DefaultKeyBuilder(with_bot_id=True, with_destiny=True)
        )
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        bot = Bot(
            token=config.bot.token,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        dp = Dispatcher(storage=storage)
        logger.info("‚úÖ –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å–æ–∑–¥–∞–Ω—ã")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        database = Database(config.database)
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Sheets
        sheets_manager = None
        try:
            sheets_manager = GoogleSheetsManager(config.google_sheets)
            logger.info("‚úÖ Google Sheets –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º middleware –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        async def services_middleware(handler, event, data):
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            event_type = type(event).__name__
            user_id = getattr(event.from_user, 'id', 'unknown') if hasattr(event, 'from_user') and event.from_user else 'unknown'
            
            context_logger = ContextLogger(
                get_logger("app.middleware"),
                {"event": event_type, "user_id": user_id}
            )
            
            context_logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è: {event_type}")
            
            try:
                async with database.get_session() as session:
                    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
                    from app.services.user_service import UserService
                    from app.services.event_service import EventService
                    
                    user_service = UserService(session, sheets_manager) if sheets_manager else UserService(session, None)
                    event_service = EventService(session, sheets_manager) if sheets_manager else EventService(session, None)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥–∞–Ω–Ω—ã–µ
                    data["session"] = session
                    data["user_service"] = user_service
                    data["event_service"] = event_service
                    data["sheets_manager"] = sheets_manager
                    data["redis_client"] = redis_client  # –î–æ–±–∞–≤–ª—è–µ–º Redis –∫–ª–∏–µ–Ω—Ç
                    data["logger"] = context_logger
                    
                    result = await handler(event, data)
                    context_logger.debug(f"–°–æ–±—ã—Ç–∏–µ {event_type} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                    return result
                    
            except Exception as e:
                context_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è {event_type}: {e}")
                raise
        
        # –°–Ω–∞—á–∞–ª–∞ middleware –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤ (inner middleware)
        dp.message.middleware(services_middleware)
        dp.callback_query.middleware(services_middleware)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dp.include_router(main_router)
        logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥–∏
        register_dialogs(dp)
        logger.info("‚úÖ –î–∏–∞–ª–æ–≥–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º aiogram-dialog
        setup_dialogs(dp)
        logger.info("‚úÖ aiogram-dialog –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –í–ê–ñ–ù–û: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ü–û–°–õ–ï setup_dialogs
        # —á—Ç–æ–±—ã –æ–Ω –∏–º–µ–ª –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ middleware aiogram-dialog
        lock_middleware = LockMiddleware(redis_client, config.bot.admin_ids)
        dp.update.outer_middleware(lock_middleware)  # –î–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
        logger.info("‚úÖ LockMiddleware –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ setup_dialogs")
        
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        try:
            await dp.start_polling(bot)
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            logger.info("üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
            await bot.session.close()
            await database.close()
            await redis_client.aclose()
            logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")
            
    except Exception as e:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        get_logger(__name__).info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        get_logger(__name__).critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)