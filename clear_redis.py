#!/usr/bin/env python3
"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ Redis –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–æ–≤."""
import asyncio
import sys
from pathlib import Path

sys.path.append(str(Path(__file__).parent))

from app.config.config import load_config
from redis.asyncio import Redis


async def clear_redis():
    """–û—á–∏—Å—Ç–∏—Ç—å Redis –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π."""
    config = load_config()
    
    if config.redis.password:
        redis_url = f"redis://:{config.redis.password}@{config.redis.host}:{config.redis.port}/0"
    else:
        redis_url = f"redis://{config.redis.host}:{config.redis.port}/0"
    
    redis_client = Redis.from_url(redis_url)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏
        keys = await redis_client.keys("*")
        
        if keys:
            print(f"üóëÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(keys)} –∫–ª—é—á–µ–π –≤ Redis")
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª—é—á–∏
            await redis_client.delete(*keys)
            print("‚úÖ –í—Å–µ –∫–ª—é—á–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ Redis")
        else:
            print("‚ÑπÔ∏è Redis –ø—É—Å—Ç")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ Redis: {e}")
    finally:
        await redis_client.aclose()


if __name__ == "__main__":
    print("üßπ –û—á–∏—Å—Ç–∫–∞ Redis...")
    asyncio.run(clear_redis())
    print("üéâ –ì–æ—Ç–æ–≤–æ!")